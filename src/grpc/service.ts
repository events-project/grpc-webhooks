// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.1
// source: service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "boilerplate";

export interface CreateExampleRequest {
  name: string;
}

export interface ExampleResponse {
  id: string;
  name: string;
}

export interface FindExampleRequest {
  id: string;
}

function createBaseCreateExampleRequest(): CreateExampleRequest {
  return { name: "" };
}

export const CreateExampleRequest = {
  encode(message: CreateExampleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateExampleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExampleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CreateExampleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExampleRequest>): CreateExampleRequest {
    return CreateExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExampleRequest>): CreateExampleRequest {
    const message = createBaseCreateExampleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExampleResponse(): ExampleResponse {
  return { id: "", name: "" };
}

export const ExampleResponse = {
  encode(message: ExampleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExampleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExampleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExampleResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ExampleResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ExampleResponse>): ExampleResponse {
    return ExampleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExampleResponse>): ExampleResponse {
    const message = createBaseExampleResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseFindExampleRequest(): FindExampleRequest {
  return { id: "" };
}

export const FindExampleRequest = {
  encode(message: FindExampleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindExampleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindExampleRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindExampleRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindExampleRequest>): FindExampleRequest {
    return FindExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindExampleRequest>): FindExampleRequest {
    const message = createBaseFindExampleRequest();
    message.id = object.id ?? "";
    return message;
  },
};

export type BoilerplateServiceDefinition = typeof BoilerplateServiceDefinition;
export const BoilerplateServiceDefinition = {
  name: "BoilerplateService",
  fullName: "boilerplate.BoilerplateService",
  methods: {
    findExample: {
      name: "FindExample",
      requestType: FindExampleRequest,
      requestStream: false,
      responseType: ExampleResponse,
      responseStream: false,
      options: {},
    },
    createExample: {
      name: "CreateExample",
      requestType: CreateExampleRequest,
      requestStream: false,
      responseType: ExampleResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface BoilerplateServiceImplementation<CallContextExt = {}> {
  findExample(
    request: FindExampleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExampleResponse>>;
  createExample(
    request: CreateExampleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExampleResponse>>;
}

export interface BoilerplateServiceClient<CallOptionsExt = {}> {
  findExample(
    request: DeepPartial<FindExampleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExampleResponse>;
  createExample(
    request: DeepPartial<CreateExampleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExampleResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
